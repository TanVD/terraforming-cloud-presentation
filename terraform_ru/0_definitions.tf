//P: Terraform это IaC инструмент, хранящий состояние инфраструктуры.
//P: Состояние сохраняется после каждого apply. Перед apply Terraform
//P: создает diff между последним сохраненным состоянием и текущим
//P: состоянием AWS (полученным через API) и применяет его к AWS,
//P: приводя его в состояние соответствующее текущему коду.

//P: Хранилище состояние создается с помощью декларации "backend",

//Example with s3
//terraform {
//  backend "s3" {
//    bucket = "tanvd.sandbox.aws.intellij.net"
//    key = "tf_clouds/terraform.tfstate"
//    region = "eu-west-1"
//  }
//  required_version = "0.11.1"
//}

//P: После этого требуется определить провайдера. Каждый провайдер
//P: предоставляет некоторый набор "ресурсов". К примеру, добавив
//P: в свой проект провайдер "aws" вы сможете управлять всеми
//P: поддерживаемыми ресурсам AWS (таким как ec2, ecs и т.д.)

//пример aws provider
//provider "aws" {
//  region = "eu-west-1"
//}

//P: Перечислим наиболее часто используемые Terraform декларации:
//P: "resource" -- позволяет управлять ресурсами с помощью terraform
//P: "data" -- позволяет получать состояние внешних ресурсов (возможно, не созданных terraform)
//P: "variable" -- обычные переменные, типы: string, bool, number, list, map
//P: "output" -- сохранение переменной в backend для дальнейшего использования

//P: NB: Мы опустим модульную систему Terraform. Она достаточно сложна для начинающих